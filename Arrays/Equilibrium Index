Q.  You are given an array Arr consisting of N integers. You need to find the equilibrium index of the array.
    An index is considered as an equilibrium index if the sum of elements of the array to the left of that index is equal to the sum of elements to the right of it.

NOTE: 
    1. The array follows 0-based indexing, so you need to return the 0-based index of the element. 
    2. Note that the element at the equilibrium index won't be considered for either left sum or right sum.
    3. If there are multiple indices which satisfy the given condition, then return the left-most index i.e if there are indices i,j,k.... which are equilibrium indices, return the minimum among them
    4. If no such index is present in the array, return -1.
example :    
1
6
1 7 3 6 5 6
Sample Output 1:
3
Explanation For Sample Input 1:
The sum of elements to the left of arr[3] = 1 + 7 + 3 = 11.
The sum of elements to the right of arr[3] = 5 + 6 = 11.
Hence the answer is 3.

Approach 1: we can solve this question by using a prefix sum which store the sum of array till that index and we can find the left val and right val and compare it if both
            are equal we ll return that index as that was our answer.
           T.C: O(N)+O(N) = O(2N) SC: O(N)
       
      code: 
int findEquilibriumIndex(vector<int> &arr) {
    int n = arr.size();
    vector<int> prefix(n);
    prefix[0] = arr[0];
    
    for(int i=1; i<n; i++){
        prefix[i] = arr[i]+prefix[i-1];
    }
    int ans = -1;
    for(int i=0; i<n; i++){
        int left_val = prefix[i]-arr[i];
        int right_val = prefix[n-1] - prefix[i];
        if(left_val == right_val) return i;
    }
    return ans;
}

Approach 2: we can improve the space complexity by instead of using prefix array we can only use variable and do it. 

  T.C : O(N)+O(N) = O(2N) SC : O(1)
  
  code: 
  int findEquilibriumIndex(vector<int> &arr) {
    int n = arr.size();
    int prefix = 0;
    int total_Sum = 0;
    for(int i=0; i<n; i++) total_Sum+=arr[i];
    int ans = -1;
    for(int i=0; i<n; i++){
        int right_val = total_Sum - prefix - arr[i];
        
        if(prefix == right_val) return i;
        prefix+=arr[i];
    }
    return ans;
}
