Given an unsorted integer array nums, return the smallest missing positive integer.

You must implement an algorithm that runs in O(n) time and uses constant extra space.

 

Example 1:

Input: nums = [1,2,0]
Output: 3
Explanation: The numbers in the range [1,2] are all in the array.
Example 2:

Input: nums = [3,4,-1,1]
Output: 2
Explanation: 1 is in the array but 2 is missing.
Example 3:

Input: nums = [7,8,9,11,12]
Output: 1
Explanation: The smallest positive integer 1 is missing.
 

Constraints:

1 <= nums.length <= 105
-2^31 <= nums[i] <= 2^31 - 1


Approach 1: sort the array and run the loop and if(arr[i]>0 && arr[i]<=n && arr[i] != i ) return i. 
              T.C: O(NlogN) s.c : O(N)(merge sort) else O(1)
    
Approach 2: using hash map we ll store all the values in hash map and same condition as above.
            T.C: O(N) S.C: O(N)

Approach 3: using the given array as hash map. 
            what we ll do is swap the the element to its correct position ranging between (1-n-1) and after that check if any no. is at wrong position means that our answer else return n+1
            
            code: 
            int firstMissingPositive(vector<int>& nums) {
                  int n = nums.size();
                  for(int i=0; i<n; i++){
                      while(nums[i]>0 && nums[i]<=n && nums[nums[i]-1] != nums[i])
                          swap(nums[i],nums[nums[i]-1]);
                  }
                  //checking for the wrong no.
                    for(int i=0; i<n; i++){
                        if(nums[i]!=i+1) return i+1;
                    }
                // if all the no. at correct pos means n+1 
                return n+1;       
            }
